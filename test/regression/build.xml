<?xml version="1.0"?>

<project name="regression-test" default="run-all" basedir="../../">

    <property name="jacorb.home" value="${basedir}" />
    <property file="${jacorb.home}/test/regression/build.properties" />

    <property name="dir.test" value="${jacorb.home}/test/regression" />

    <import file="${dir.test}/ant/build-coverage.xml" />

    <property name="jacorb.test.outdir" value="${dir.test}/output" />

    <!-- ==================================================== -->
    <!--             JacORB Tests build file                  -->
    <!-- ==================================================== -->

   <import file="../../etc/common.xml"/>

   <!-- Using test-base-init so we can set different src, class and idl directories -->
    <target name="test-base-init">
        <property name="dirs.base" value="${dir.test}" />
        <property name="src" value="${dir.test}/src" />
        <property name="src.generated" value="${src}/generated" />
        <property name="idl" value="${dir.test}/idl" />
        <property name="lib" value="${basedir}/lib" />

        <property name="BASE-INIT" value="true" />
    </target>

    <target name="test-init" depends="test-base-init,init,load-taskdef">
        <path id="cp.compile-test">
            <pathelement location="${dir.test}/classes" />

            <fileset dir="${dir.test}/lib">
                <include name="*.jar" />
            </fileset>

            <path refid="path.base" />
        </path>

        <path id="cp.test">
            <path refid="cp.compile-test" />

            <path path="${java.class.path}" />
        </path>

        <macrodef name="jacorb-rmic">
            <attribute name="classname" />
            <attribute name="iiop" default="true" />
            <attribute name="iiopopts" default="-poa" />

            <sequential>
                <rmic base="${classdir}"
                      classname="@{classname}"
                      verify="${rmic.verify}"
                      iiop="@{iiop}"
                      iiopopts="@{iiopopts}"
                      debug="${rmic.debug}"
                      sourcebase="${src}/generated">
                </rmic>
            </sequential>
        </macrodef>

        <presetdef name="process-idl">
            <jacidl srcdir="${idl}"
                    ami_callback="@{ami}"
                    destdir="${src}/generated"
                    includepath="${basedir}/idl/omg"
                    forceoverwrite="true"
                    helpercompat="jacorb" />
        </presetdef>
    </target>


    <!-- ==================================================== -->
    <!--             compile and run tests                    -->
    <!-- ==================================================== -->

    <target name="build-all"
            depends="test-init,
                     compile-test-listenendpoints,
                     idl,
                     compile-src,
                     compile-rmic,
                     compile-src-notification,
                     instrument,
                     compile-interop" />

    <target name="compile-src">
        <jacorb-javac javac-includes="**"
                      javac-excludes="generated/**,
                           **/RMITestServant.java,
                           org/jacorb/test/notification/**,
                           org/jacorb/test/jmx/**"
                      javac-classpathref="cp.compile-test"
                      javac-antruntime="true"
                      javac-xlint="">
        </jacorb-javac>
    </target>

    <path path="${java.class.path}" />

    <target name="compile-rmic">
        <jacorb-rmic classname="org.jacorb.test.orb.rmi.RMITestImpl" />
        <jacorb-rmic classname="org.jacorb.test.bugs.bugjac149.RemoteIPingImpl" />
        <jacorb-javac javac-includes="**/RMITestServant.java" javac-classpathref="cp.compile-test" javac-xlint=""/>
    </target>

    <target name="compile-src-notification" unless="NO_BUILD">
        <jacorb-javac javac-includes="org/jacorb/test/notification/**/*.java"
                      javac-excludes="org/jacorb/test/notification/plugins/**,
                              org/jacorb/test/notification/jmx/**"
                      javac-classpathref="cp.compile-test"
                      javac-xlint=""/>
    </target>

    <target name="compile-interop">
        <ant antfile="${basedir}/test/interop/build.xml" target="compile" inheritall="false" useNativeBasedir="true"/>
    </target>

    <target name="clean-interop">
        <ant antfile="${basedir}/test/interop/build.xml" target="clean" inheritall="false" useNativeBasedir="true"/>
    </target>

    <target name="compile-test-listenendpoints">
        <ant antfile="${basedir}/test/listenendpoints/echo/build.xml" target="all" inheritall="false"/>
        <ant antfile="${basedir}/test/listenendpoints/echo_corbaloc/build.xml" target="all" inheritall="false"/>
    </target>

    <target name="clean-test-listenendpoints">
        <ant antfile="${basedir}/test/listenendpoints/echo/build.xml" target="clean" inheritall="false"/>
        <ant antfile="${basedir}/test/listenendpoints/echo_corbaloc/build.xml" target="clean" inheritall="false"/>
    </target>

    <!-- run the tests -->

    <target name="run"
            depends="test-init,
                     jacunit-junit,
                     jacunit-junit-report-txt,
                     jacunit-junit-report-html,
                     jacunit-coverage-report,
                     jacunit-clean,
                     jacunit-checkfail" />

    <target name="jacunit-checkargs" depends="test-init">
        <condition property="jacorb.test.ssl" value="true">
            <isset property="TEST_SSL" />
        </condition>

        <condition property="jacorb.test.imr" value="true">
            <isset property="TEST_IMR" />
        </condition>

        <!-- By default, we do run naming and notification tests -->
        <!-- Don't set the property as it looks for the property's existence -->
        <!-- rather than its value -->
        <!-- ...property name="jacorb.test.exclude-services" value="false" -->

        <property name="jacorb.test.verbose" value="false" />

        <!-- timeout if we want in tests for something to happen that takes a while -->
        <property name="jacorb.test.timeout.medium" value="10000" />

        <!-- timeout until a server comes up -->
        <property name="jacorb.test.timeout.server" value="120000" />

        <property name="jacorb.test.pkg" value="**" />
        <property name="jacorb.test.pattern" value="${jacorb.test.pkg}/*Test.class" />
        <property name="jacorb.test.timeout.global" value="480000" />

        <property name="jacorb.test.maxmemory" value="1024M" />

        <property name="jacorb.test.server.version" value="cvs" />
        <property name="jacorb.test.client.version" value="cvs" />

        <property name="jacorb.test.launcherconfigfile" value="${dir.test}/resources/test.properties" />

        <property name="jacorb.test.home" value="${dir.test}" />

        <property name="dir.jacorb.client" value="${basedir}" />
        <path id="cp.jacorb.client">
            <pathelement location="${dir.jacorb.client}/classes" />
            <fileset dir="${dir.jacorb.client}/lib" includes="*.jar" />
        </path>

        <property name="jacorb.test.piddir" value="${jacorb.test.outdir}/pid" />

        <mkdir dir="${jacorb.test.outdir}" />
    </target>

    <target name="jacunit-coverage-enabled" if="jacorb.test.coverage">
        <coverage-propset id="ps.coverage" />

        <coverage-path id="cp.coverage" />

        <path id="_test.bootclasspath">
            <path refid="cp.coverage" />
            <path refid="cp.jacorb.client" />
        </path>
    </target>

    <target name="jacunit-coverage-disabled" unless="jacorb.test.coverage">

        <propertyset id="ps.coverage" />

        <path id="_test.bootclasspath">
            <path refid="cp.jacorb.client" />
        </path>
    </target>

    <target name="jacunit-junit-jvm-custom" if="jacorb.test.client.jvm">
        <java jvm="${jacorb.test.client.jvm}"
              fork="true"
              failonerror="true"
              classname="ignored"
              outputproperty="jacorb.test.client.jvminfo">
            <jvmarg line="-version" />
        </java>

        <presetdef name="jacorb-junit">
            <junit jvm="${jacorb.test.client.jvm}" />
        </presetdef>
    </target>

    <target name="jacunit-junit-jvm-default" unless="jacorb.test.client.jvm">
        <java fork="true" failonerror="true" classname="ignored" outputproperty="jacorb.test.client.jvminfo">
            <jvmarg line="-version" />
        </java>

        <presetdef name="jacorb-junit">
            <junit />
        </presetdef>
    </target>

    <target name="jacunit-junit"
            depends="test-init,
                     jacunit-checkargs,
                     jacunit-coverage-enabled,
                     jacunit-coverage-disabled,
                     jacunit-junit-jvm-custom,
                     jacunit-junit-jvm-default">

        <taskdef name="jacunit-banner"
                 classname="org.jacorb.test.common.launch.PrintTestBanner"
                 classpathref="cp.test" />

        <propertyset id="jacorb.test.properties">
            <propertyset refid="ps.coverage" />
            <propertyref prefix="jacorb.test" />
            <propertyref prefix="jacorb.home" />
        </propertyset>

        <jacunit-banner outputproperty="jacorb.test.testbanner">
            <syspropertyset refid="jacorb.test.properties" />
        </jacunit-banner>

        <path path="${java.class.path}" />

        <echo message="${jacorb.test.testbanner}" level="verbose" />

        <property name="_bootclasspath" refid="_test.bootclasspath" />

        <mkdir dir="${jacorb.test.piddir}" />
        <jacorb-junit fork="true"
                      includeantruntime="true"
                      timeout="${jacorb.test.timeout.global}"
                      showoutput="true"
                      errorproperty="test.failed"
                      failureproperty="test.failed"
                      maxmemory="${jacorb.test.maxmemory}">

            <formatter type="brief" usefile="false" />
            <formatter type="plain" />
            <formatter type="xml" unless="jacorb.test.j2me" />

            <syspropertyset refid="jacorb.test.properties" />

            <jvmarg value="-Xbootclasspath/p:${_bootclasspath}" />

            <classpath>
                <pathelement location="${classdir}" />

                <pathelement location="${src}" />

                <pathelement location="${dir.test}/resources" />

                <path refid="cp.test" />
            </classpath>

            <batchtest todir="${jacorb.test.outdir}">
                <fileset dir="${dir.test}/classes" includes="${jacorb.test.pattern}">
                    <exclude name="**/AllTest.class" />
                    <exclude name="**/PackageTest.class" />

                    <exclude name="org/jacorb/test/idl/**" if="jacorb.test.j2me" />
                    <exclude name="org/jacorb/test/imr/**" if="jacorb.test.j2me" />
                    <exclude name="org/jacorb/test/ir/**" if="jacorb.test.j2me" />
                    <exclude name="org/jacorb/test/orb/rmi/**" if="jacorb.test.j2me" />

                    <exclude name="org/jacorb/test/naming/**" if="jacorb.test.exclude-services" />
                    <exclude name="org/jacorb/test/notification/**" if="jacorb.test.exclude-services" />

                    <exclude name="org/jacorb/test/common/**" />
                </fileset>
            </batchtest>
        </jacorb-junit>

        <exec executable="/bin/bash">
            <arg value="-c" />
            <arg value="kill -9 $(ls ${jacorb.test.piddir}) 2>/dev/null" />
        </exec>

        <delete failonerror="false">
            <fileset dir="${jacorb.test.piddir}" includes="**/*" />
        </delete >

    </target>

    <target name="jacunit-clean" depends="jacunit-checkargs">
        <delete>
            <fileset dir="${jacorb.test.outdir}">
                <include name="header.txt" />
                <include name="TESTS-TestSuites.xml" />
                <include name="*.tmp" />
            </fileset>
        </delete>
    </target>

    <target name="jacunit-realclean" depends="jacunit-clean">
        <delete includeemptydirs="true">
            <fileset dir="${jacorb.test.outdir}">
                <include name="coverage/**" />
                <include name="html/**" />
                <include name="TEST*.xml" />
                <include name="TEST*.txt" />
            </fileset>
        </delete>
    </target>

    <target name="jacunit-junit-report-html" depends="jacunit-checkargs" if="jacorb.test.junit.html.process">
        <property name="jacorb.test.junit.html.dir" value="${jacorb.test.outdir}/html" />

        <junitreport todir="${jacorb.test.outdir}">
            <fileset dir="${jacorb.test.outdir}">
                <include name="**/*.xml" />
                <exclude name="**/TESTS-TestSuites.xml" />
            </fileset>
            <report format="frames" todir="${jacorb.test.junit.html.dir}" />
        </junitreport>
    </target>

    <macrodef name="sumColumns">
        <attribute name="result" />
        <attribute name="srcFile" default="${jacorb.test.outdir}/AllResults.tmp" />
        <attribute name="pattern" />

        <sequential>
            <typedef name="sumfilter" classname="org.jacorb.test.ant.SumFilter" classpathref="cp.test" />

            <loadfile property="@{result}" srcfile="@{srcFile}">
                <filterchain>
                    <replaceregex pattern="@{pattern}" replace="\1" />
                    <sumfilter />
                    <tailfilter lines="1" />
                    <striplinebreaks />
                </filterchain>
            </loadfile>

        </sequential>
    </macrodef>

    <target name="jacunit-junit-report-txt" depends="jacunit-checkargs, test-init">

        <concat destfile="${jacorb.test.outdir}/AllResults.tmp">
            <fileset dir="${jacorb.test.outdir}" includes="TEST-*.txt" excludes="TEST-org.jacorb.test.AllTest.txt" />
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="Tests run: \d+, Failures: \d+, Errors: \d+" />
                </linecontainsregexp>
            </filterchain>
        </concat>

        <sumColumns result="result.testCount" pattern=".*Tests run: (\d+).*" />
        <sumColumns result="result.testFailures" pattern=".*Failures: (\d+).*" />
        <sumColumns result="result.testErrors" pattern=".*Errors: (\d+).*" />
        <sumColumns result="result.timeElapsed" pattern=".*elapsed: ((?:\d|,)+).*" />

        <concat force="true" destfile="${jacorb.test.outdir}/TEST-org.jacorb.test.AllTest.txt">
            <header filtering="false">
${jacorb.test.testbanner}

# accumulated results. see the single TEST-{packageName.testName}.txt files for detailed results
Tests run: ${result.testCount}, Failures: ${result.testFailures}, Errors: ${result.testErrors}, Time elapsed: ${result.timeElapsed} sec${line.separator}${line.separator}</header>
            <fileset dir="${jacorb.test.outdir}" includes="TEST-*.txt" excludes="TEST-org.jacorb.test.AllTest.txt" />
            <filterchain>
                <replaceregex pattern="^Tests run:" replace="# Tests run:" />
                <striplinecomments>
                    <comment value="#" />
                </striplinecomments>
            </filterchain>
        </concat>
    </target>

    <target name="jacunit-coverage-report" if="jacorb.test.coverage">
        <property name="jacorb.test.coverage.dir" value="${jacorb.test.outdir}/coverage" />
        <coverage-report destdir="${jacorb.test.coverage.dir}" />
    </target>

    <target name="jacunit-checkfail" if="jacorb.test.shouldantfail">
        <fail if="test.failed" message="At least one JUnit test failed. check log for details." />
    </target>

    <!-- ==================================================== -->
    <!--                  compile idl                         -->
    <!-- ==================================================== -->

    <target name="idl" unless="NO_BUILD">
        <antcall target="idl-wrapped" />
    </target>

    <target name="idl-wrapped"
            depends="test-init,
                     idl-localpitest,
                     idl-helloserver,
                     idl-tests,
                     idl-anyserver,
                     idl-basicserver,
                     idl-arrayserver,
                     idl-codesetserver,
                     idl-charserver,
                     idl-longlongseqserver,
                     idl-callbackserver,
                     idl-timingserver,
                     idl-syncscopeserver,
                     idl-connectiontimeout,
                     idl-bidir,
                     idl-imr,
                     idl-iiopaddress,
                     idl-recursive,
                     idl-notification,
                     idl-notification-typed,
                     idl-value,
                     idl-value-test,
                     idl-abstract-interface,
                     idl-exception,
                     idl-shutdown,
                     idl-dii,
                     idl-poa,
                     idl-bugs,
                     idl-ami-bugs,
                     idl-transport-current-server,
                     idl-bugjac608,
                     idl-miop,
                     idl-interceptor,
                     idl-max-connection-enforcement" />

    <!-- ==================================================== -->
    <!--                compile Tests.idl                     -->
    <!-- ==================================================== -->

    <target name="idl-localpitest">
         <process-idl includes="LocalPITest.idl" />
    </target>

    <target name="idl-helloserver">
         <process-idl includes="Hello.idl" />
    </target>

    <target name="idl-transport-current-server">
        <process-idl includes="TransportCurrentServer.idl" />
    </target>

    <target name="idl-anyserver">
        <process-idl includes="AnyServer.idl" />
    </target>

    <target name="idl-tests">
        <process-idl includes="Tests.idl" />
    </target>

    <target name="idl-basicserver">
        <process-idl includes="BasicServer.idl" />
    </target>

    <target name="idl-arrayserver">
        <process-idl includes="ArrayServer.idl" />
    </target>

    <target name="idl-codesetserver">
        <process-idl includes="CodesetServer.idl" />
    </target>

    <target name="idl-charserver">
        <process-idl includes="CharServer.idl" />
    </target>

    <target name="idl-longlongseqserver">
        <process-idl includes="LongLongSeqServer.idl" />
    </target>

    <target name="idl-callbackserver">
        <process-idl includes="CallbackServer.idl" ami_callback="true" />
    </target>

    <target name="idl-timingserver">
        <process-idl includes="TimingServer.idl" ami_callback="true" />
    </target>

    <target name="idl-syncscopeserver">
        <process-idl includes="SyncScopeServer.idl" ami_callback="true" />
    </target>

    <target name="idl-connectiontimeout">
        <process-idl includes="ConnectionTimeout.idl" />
        <process-idl includes="ConnectionTimeout2.idl" />
    </target>

    <target name="idl-bidir">
        <process-idl includes="BiDir.idl" />
    </target>

    <target name="idl-iiopaddress">
        <process-idl includes="IIOPAddress.idl" />
    </target>

    <target name="idl-imr">
        <process-idl includes="IMRTest.idl" />
    </target>

    <target name="idl-recursive">
        <process-idl includes="RecursiveParamServer.idl" />
    </target>

    <target name="idl-notification">
        <process-idl includes="Notification.idl" />
    </target>

    <target name="idl-notification-typed">
        <process-idl includes="TypedNotification.idl" />
    </target>

    <target name="idl-value">
        <process-idl includes="value.idl" />
    </target>

    <target name="idl-value-test">
        <process-idl includes="ValueTest.idl" />
    </target>

    <target name="idl-abstract-interface">
        <process-idl includes="Abstract_Interface.idl" />
    </target>

    <target name="idl-exception">
        <process-idl includes="ExceptionServer.idl" />
    </target>

    <target name="idl-shutdown">
        <process-idl includes="ShutdownServer.idl" />
    </target>

    <target name="idl-dii">
        <process-idl includes="diiserver.idl" />
    </target>

    <target name="idl-poa">
        <process-idl includes="poaThread.idl" />
    </target>

    <target name="idl-bugs">
        <process-idl includes="bug*.idl" />

        <process-idl includes="_bugjac560.idl" ami_callback="true">
            <i2jpackage names="Node:cerent.cms.idl.Node" />
        </process-idl>

        <process-idl includes="_bugjac801.idl" generateEnhanced="true"/>

    </target>

    <target name="idl-ami-bugs">
        <process-idl includes="ami_bug*.idl" ami_callback="true" />
    </target>

    <target name="idl-bugjac608">
        <jacidl includes="antBugJac608.idl"
                srcdir="${idl}"
                ami_callback="false"
                destdir="${src}/generated"
                includepath="${basedir}/idl/omg"
                helpercompat="jacorb"
                forceoverwrite="true"
                sloppyidentifiers="true">
            <i2jpackage names="antBugJac608:org.jacorb.test.antBugJac608" />
        </jacidl>
    </target>

    <target name="idl-miop">
        <process-idl includes="MIOP.idl" />
    </target>

    <target name="idl-interceptor">
        <process-idl includes="ctx_passing.idl" />
    </target>

    <target name="idl-max-connection-enforcement">
        <process-idl includes="MaxConnectionEnforcement.idl" />
    </target>

    <!-- ==================================================== -->
    <!--                  code coverage                       -->
    <!-- ==================================================== -->

    <target name="instrument"
            depends="test-init"
            if="jacorb.test.coverage"
            description="Instrument the main JacORB code for coverage analysis">

        <coverage-instrument>
            <fileset dir="${basedir}/classes">
                <include name="**/*.class" />

                <exclude name="org/jacorb/ir/gui/**" />
                <exclude name="org/jacorb/naming/namemanager/**" />
                <exclude name="org/jacorb/poa/gui/**" />
                <exclude name="org/jacorb/trading/**" />

                <!-- exclude everything that has a corresponding .java source file in src/generated -->
                <present present="srconly" targetdir="${basedir}/src/generated">
                    <mapper type="glob" from="*.class" to="*.java" />
                </present>
            </fileset>
        </coverage-instrument>
    </target>

    <target name="show">
        <echoproperties />
    </target>

    <!-- ==== -->
    <!-- J2ME -->
    <!-- ==== -->

    <target name="j2me:no-build" unless="NO_BUILD">
        <fail>
            don't compile the testsuite using J2ME as target.
            instead compile using a standard JDK (ant build-all).
            the testsuite will disable the tests that aren't supported by the J2ME VM
        </fail>
    </target>

    <target name="j2me:test-init">
        <property name="jacorb.test.j2me" value="true" />
        <property name="jacorb.test.annotations.parserclass" value="org.jacorb.test.common.NullTestAnnotationsParser" />
        <property name="jacorb.test.client.version" value="cvs-j2me" />
        <property name="jacorb.test.server.version" value="cvs-j2me" />
        <property name="jacorb.test.jacorb_version.1.property.jacorb.java.home" value="${dir.j2me}" />
        <property name="jacorb.test.client.jvm" value="${dir.j2me}/bin/cvm" />
        <property name="NO_BUILD" value="true" />
    </target>

    <target name="j2me:run-all"
            depends="j2me:verify, j2me:no-build, j2me:test-init, run-all"
            description="run all JacORB ME tests" />

    <!-- ==================================================== -->
    <!--                  run all tests                       -->
    <!-- ==================================================== -->

    <target name="run-all"
            description="Run and build all Jacorb tests. For any run*&#13;&#10;
                            tests the following -D parameters are&#13;&#10;
                            available:&#13;&#10;
                            jacorb.test.ssl=true [default:true] &#13;&#10;
                            jacorb.test.coverage=true [default:false] &#13;&#10;
                            jacorb.test.verbose=true [default:false]"
            depends="build-all, run">
    </target>

    <!-- ==================================================== -->
    <!--                  run idl tests                       -->
    <!-- ==================================================== -->

    <target name="run-all-idl" description="Run all Jacorb tests in the idl package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/idl/**" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                  run bug tests                       -->
    <!-- ==================================================== -->


    <target name="run-all-bugs" description="Run all Jacorb tests in the bugs package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/bugs/**" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                  run orb/poa tests                   -->
    <!-- ==================================================== -->


    <target name="run-all-orb" description="Run all Jacorb tests in the orb package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/orb/**" />
        </antcall>
    </target>


    <target name="run-all-poa" description="Run all Jacorb tests in the poa package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/poa/**" />
        </antcall>
    </target>

    <!-- ==================================================== -->
    <!--                  run openorb tests                   -->
    <!-- ==================================================== -->


    <target name="run-all-openorb"
          description="Run all Openorb tests in the orb package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/openorb/orb/test/**" />
        </antcall>
    </target>

    <!-- ==================================================== -->
    <!--                  run rmi tests                       -->
    <!-- ==================================================== -->


    <target name="run-all-rmi" description="Run all Jacorb tests in the rmi package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/orb/rmi/**" />
        </antcall>
    </target>


    <!-- ==================================================== -->
    <!--                 run dynany tests                     -->
    <!-- ==================================================== -->


    <target name="run-all-dynany" description="Run all Jacorb tests in the dynany package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/orb/dynany/**" />
        </antcall>
    </target>

    <!-- ==================================================== -->
    <!--                 run dii tests                        -->
    <!-- ==================================================== -->

    <target name="run-all-dii" description="Run all Jacorb tests in the dii package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/dii/**" />
        </antcall>
    </target>


    <target name="run-all-imr">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/imrutility/**" />
        </antcall>
    </target>

    <!-- ==================================================== -->
    <!--                 run transport tests                  -->
    <!-- ==================================================== -->


    <target name="run-all-transport-current" description="Run all Jacorb tests in the tc (TransportCurrent) package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/transport/**" />
        </antcall>
    </target>

    <!-- ==================================================== -->
    <!--                 run nio tests                  -->
    <!-- ==================================================== -->


    <target name="run-all-nio" description="Run all Jacorb tests in the nio package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/nio/**" />
        </antcall>
    </target>

     <!-- ==================================================== -->
    <!--                 run notification tests               -->
    <!-- ==================================================== -->


    <target name="run-all-notification" description="Run all Jacorb tests in the notification package">
        <antcall target="run-all">
            <param name="jacorb.test.pkg" value="org/jacorb/test/notification/**" />
        </antcall>
    </target>

    <!-- ==================================================== -->
    <!--                   clean up                           -->
    <!-- ==================================================== -->

    <target name="clean"
            depends="jacunit-realclean, clean-interop, clean-test-listenendpoints"
            description="Remove all generated source files and class files">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${classdir}" includes="**/*" />
            <fileset dir="${src}/generated" includes="**/*" />
            <fileset dir="${dir.test}/coverage" />
            <fileset dir="${jacorb.test.outdir}" />
            <fileset file="${src}/org/jacorb/test/orb/rmi/FixSunDelegateBug.java" />
        </delete>
    </target>
</project>
